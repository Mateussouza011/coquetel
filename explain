# Aplicativo Flutter de Coquet√©is - Como Funciona

Este √© um aplicativo que mostra uma lista de coquet√©is com receitas e ingredientes. Vou explicar como funciona de forma simples.

## O que o app faz?

- Mostra uma lista de coquet√©is em cards bonitos
- Permite pesquisar coquet√©is pelo nome
- Filtra por categorias (como "Cocktail", "Shot", etc.)
- Mostra detalhes completos de cada drink
- Salva favoritos
- Funciona em portugu√™s, ingl√™s, espanhol e franc√™s

## Como est√° organizado?

### üì± Telas (screens)
- **Splash**: Tela inicial com logo
- **Timeline**: Tela principal com lista de drinks
- **Detalhes**: Mostra receita completa
- **Favoritos**: Lista dos drinks salvos
- **Loading**: Tela de carregamento
- **Erro**: Quando algo d√° errado

### üß© Componentes (widgets)
- **CocktailCard**: Cada card de drink na lista
- **AppBottomNav**: Barra de navega√ß√£o inferior

### üìä Dados (models)
- **Cocktail**: Representa um drink com nome, foto, ingredientes, etc.

### üåê Servi√ßos (services)
- **CocktailService**: Busca dados dos coquet√©is na internet
- **ApiService**: Faz as requisi√ß√µes para a API

## De onde v√™m os dados?

Os dados v√™m da API TheCocktailDB (thecocktaildb.com), que √© gratuita e tem milhares de receitas de drinks.

```dart
// URL da API
https://www.thecocktaildb.com/api/json/v1/1
```

# Principais aspectos do c√≥digo do aplicativo Coquetel

Vou explicar as partes mais importantes do c√≥digo excluindo o sistema multilinguagem:

## 1. Estrutura Geral do Projeto

O projeto segue uma arquitetura bem organizada dividida em:

- **screens**: Cont√©m as telas principais do aplicativo
- **widgets**: Componentes reutiliz√°veis da UI
- **models**: Classes de dados
- **services**: L√≥gica de neg√≥cios e comunica√ß√£o com APIs
- **config**: Configura√ß√µes globais

## 2. Configura√ß√£o da API

```dart
class ApiConfig {
  static const String baseUrl = 'https://www.thecocktaildb.com/api/json/v1/1';
}
```

O aplicativo utiliza a API TheCocktailDB para buscar dados de coquet√©is. A configura√ß√£o √© centralizada para facilitar mudan√ßas.

## 3. Design do Tema

```dart
theme: ThemeData(
  useMaterial3: true,
  colorScheme: ColorScheme.fromSeed(
    seedColor: const Color(0xFF8C2B47),
    brightness: Brightness.light,
  ),
  cardTheme: CardTheme(
    elevation: 3.0,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(16.0),
    ),
    margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
  ),
  // ...outros estilos
)
```

O aplicativo implementa Material Design 3 com um esquema de cores baseado em um tom bord√¥/vinho (0xFF8C2B47) como cor principal, criando uma identidade visual coerente e elegante.

## 4. Sistema de Servi√ßos

O aplicativo usa servi√ßos separados para gerenciar diferentes aspectos:

- **CocktailService**: Respons√°vel por buscar dados de coquet√©is da API
- **ApiService**: Gerencia requisi√ß√µes HTTP gerais

Esta separa√ß√£o de responsabilidades segue boas pr√°ticas de arquitetura, facilitando a manuten√ß√£o e testabilidade.

## 5. Tela Principal (TimelineScreen)

A `TimelineScreen` exibe coquet√©is em formato de timeline, permitindo:
- **Pesquisa** de coquet√©is por nome
- **Filtragem** por categoria
- **Carregamento infinito** (lazy loading) para obter mais itens
- **Pull-to-refresh** para atualizar os dados
- **Tratamento de erros** com feedback visual adequado
- **Layout responsivo** que se adapta a diferentes tamanhos de tela

## 6. Modelo de Dados

O modelo `Cocktail` processa os dados recebidos da API:

```dart
class Cocktail {
  final String id;
  final String name;
  final String category;
  final String instructions;
  final String imageUrl;
  final List<CocktailIngredient> ingredients;
  
  // ...construtores e m√©todos
  
  factory Cocktail.fromJson(Map<String, dynamic> json) {
    // Convers√£o do JSON para objeto
  }
}
```

Este modelo utiliza o padr√£o de f√°brica `fromJson` para transformar os dados da API em objetos Dart utiliz√°veis.

## 7. Tela de Detalhes

O aplicativo possui uma tela de detalhes que mostra informa√ß√µes completas sobre o coquetel selecionado, incluindo:
- Imagem do coquetel
- Nome e categoria
- Lista de ingredientes com medidas
- Instru√ß√µes de preparo

## 8. Tratamento de Erros

O c√≥digo implementa mecanismos robustos para lidar com erros de rede ou da API:
- **Estado de loading** com indicadores visuais
- **Tela de erro** com op√ß√£o de tentar novamente
- **Tratamento de casos extremos** (nenhum resultado, busca sem correspond√™ncia, etc.)

## 9. Responsividade

O aplicativo foi projetado para funcionar bem em diferentes tamanhos de tela:

```dart
// Exemplo de c√≥digo responsivo
final isLargeScreen = MediaQuery.of(context).size.width > 900;
final cardCrossAxisCount = isLargeScreen ? 3 : 1;

// Usado para ajustar o layout baseado no tamanho da tela
```

Esta abordagem garante uma boa experi√™ncia tanto em dispositivos m√≥veis quanto em tablets.
